import numpy as np

from utils import *

def encode(symbols: np.ndarray) -> np.ndarray:
    """
    Encode a bitstream into a time-domain signal using IFFT and add a cyclic prefix in front.
    """

    # Pad until a multiple of SYMBOLS_PER_BLOCK
    constellation = [1+1j, 1-1j, -1-1j, -1+1j]
    paddingSymbols = np.random.choice(constellation, size=(-len(symbols)) % (SYMBOLS_PER_BLOCK * FRAMES))
    symbols = np.concatenate((symbols, paddingSymbols)).reshape(-1, SYMBOLS_PER_BLOCK)

    # Fill unused frequency bins
    # After that, symbols is a matrix with EFFECTIVE_SYMBOLS_PER_BLOCK columns
    symbols = np.concatenate((np.random.choice(constellation, size=(symbols.shape[0], HIGH_PASS_INDEX)),
                              symbols,
                              np.random.choice(constellation, size=(symbols.shape[0], EFFECTIVE_SYMBOLS_PER_BLOCK - LOW_PASS_INDEX)),
                            ), axis=1)
    
    # Add zeros to the zeroth bin and do conjugate symmetry
    # After that, encoded_symbols is a matrix with N_DFT columns
    encoded_symbols = np.concatenate((
        np.zeros((symbols.shape[0], 1)),
        symbols,
        np.zeros((symbols.shape[0], 1)),
        np.conjugate(symbols[:, ::-1])
    ), axis=1)

    # Flatten the signal    
    symbolsInTime = np.fft.ifft(encoded_symbols, axis=1).real
    signal = np.concatenate((symbolsInTime[:, -CYCLIC_PREFIX:], symbolsInTime), axis=1).flatten()
    return signal

def insert_known_blocks(signal: np.ndarray) -> np.ndarray:
    """
    Insert a synchronization OFDM block before every information block of the signal.
    """
    # With varicable frame length
    known_blocks = get_known_blocks()
    blocks = signal.reshape(-1, BLOCK_LENGTH * INFORMATION_BLOCKS_PER_FRAME)
    return np.concatenate((known_blocks, blocks), axis=1).flatten()

def get_known_blocks() -> np.ndarray:
    """
    Generate known blocks of symbols for synchronization.
    Returns a matrix with BLOCK_LENGTH columns.
    """
    # There are as many information blocks as known blocks currently
    # known blocks currently generated by generating a long btistream and chopping it up
    symbols = get_symbols_from_bitstream(get_non_repeating_bits(BITS_PER_SYMBOL * SYMBOLS_PER_BLOCK * FRAMES, 1), skip_encoding=True)
    return encode(symbols).reshape(-1, BLOCK_LENGTH)

def insert_chirps(signal: np.ndarray) -> np.ndarray:
    """
    Insert a reverse chirp at the beginning and chirp at the end of the signal.
    """
    chirp = get_chirp()
    return np.concatenate((chirp[::-1], signal, chirp))

def get_chirp() -> np.ndarray:
    """
    Generate a chirp signal.
    """
    t = np.linspace(0, CHIRP_TIME, CHIRP_LENGTH)
    signal = CHIRP_FACTOR * np.sin(2 * np.pi * (CHIRP_LOW + (CHIRP_HIGH - CHIRP_LOW) * t / CHIRP_TIME) * t)
    return signal
    
if __name__ == "__main__":
    symbols = get_symbols_from_bitstream(DATA)
    signal = encode(symbols)
    signal = insert_known_blocks(signal)
    signal = insert_chirps(signal)

    print(f'Bitrate: {round(len(DATA) * SAMPLE_RATE / len(signal))} bps')
    print(f'Bitstream: {len(DATA)} bits')
    print(f'Time: {(len(signal) / SAMPLE_RATE):.2f} seconds')

    # Insert one second of nothing before and after the signal
    signal = np.concatenate((np.zeros(SAMPLE_RATE), signal, np.zeros(SAMPLE_RATE)))
    write_wav(AUDIO_PATH, signal)